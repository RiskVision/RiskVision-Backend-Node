const axios = require('axios');

class VulnerabilityScanner {
    constructor(elements, interval = 6000, duration = 180000) {
        this.elements = elements;
        this.interval = interval;
        this.duration = duration;
        this.results = {};
        this.timer = null;
    }

    async start() {
        for (const element of this.elements) {
            await this.scanElement(element);
            await this.sleep(1000); // Sleep to avoid rate limiting
        }
        return this.results;
    }

    async scanElement(element) {
        try {
            console.log(`Scanning element: ${element}`);
            const response = await axios.get(`https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=${element}&keywordExactMatch&pubStartDate=2024-09-04T00:00:00.000&pubEndDate=2024-11-05T00:00:00.000`);
            const filteredData = this.filterResponse(response.data);
            this.results[element] = filteredData;
        } catch (error) {
            console.error(`Error scanning ${element}:`, error);
        }
    }

    filterResponse(data) {
        const vulnerabilities = [];
        data.vulnerabilities.forEach(vuln => {
            const cve = vuln.cve;
            const processedVuln = {
                id: cve.id,
                published: cve.published,
                lastModified: cve.lastModified,
                description: cve.descriptions?.find(desc => desc.lang === 'en')?.value,
                cvssScore: cve.metrics?.cvssMetricV2?.[0]?.cvssData?.baseScore,
                confidentialityImpact: cve.metrics?.cvssMetricV2?.[0]?.cvssData?.confidentialityImpact,
                integrityImpact: cve.metrics?.cvssMetricV2?.[0]?.cvssData?.integrityImpact,
                availabilityImpact: cve.metrics?.cvssMetricV2?.[0]?.cvssData?.availabilityImpact,
            };
            vulnerabilities.push(processedVuln);
        });
        return vulnerabilities;
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

module.exports = VulnerabilityScanner