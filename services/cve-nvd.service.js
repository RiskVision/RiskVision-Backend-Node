const axios = require('axios');
const AppError = require('../utils/appError');
const catchAsync = require('../utils/catchAsync');


const getNVDResponse = async () => {
    try {

        const NVD_API_KEY = process.env.NVD_API_KEY;

        const url = "https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=PAX&keywordExactMatch&pubStartDate=2024-08-04T00:00:00.000&pubEndDate=2024-10-22T00:00:00.000";

        const headers = {
            'Content-Type': 'application/json',
            'api-key': NVD_API_KEY,
        };

        const response = await axios.get(url);

        if (!response || response.status !== 200) {
            throw new AppError(`Failed to fetch data: ${response.statusText}`, response.status);
        }

        return response.data.vulnerabilities[0].cve.descriptions[1].value;
    } catch (error) {
        console.error('Error fetching vulnerability:', error);
        return new AppError('Error fetching vulnerability', 500);
    }
}

module.exports = {
    getNVDResponse
};


/* //PARA GUARDAR por el momento

const axios = require('axios');

class VulnerabilityScanner {
    constructor(elements, interval = 6000, duration = 180000) {
        this.elements = elements;
        this.interval = interval;
        this.duration = duration;
        this.results = {};
        this.timer = null;
    }

    async start() {
        const endTime = Date.now() + this.duration;
        while (Date.now() < endTime) {
            for (const element of this.elements) {
                this.scanElement(element); // Run scanElement without await to not block the loop
            }
            await this.sleep(this.interval);
        }
        console.log('Scanning complete');
        return this.results;
    }

    async scanElement(element) {
        try {
            const response = await axios.get(`https://api.example.com/vulnerabilities?param=${element}`);
            const filteredData = this.filterResponse(response.data);
            this.results[element] = filteredData;
        } catch (error) {
            console.error(`Error scanning ${element}:`, error);
        }
    }

    filterResponse(data) {
        return data.filter(item => item.riskLevel > 2);
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

const elementsToScan = ['element1', 'element2', 'element3']; // Replace with your elements
const scanner = new VulnerabilityScanner(elementsToScan);

(async () => {
    await scanner.start().then(results => {
        console.log('Final Results:', results);
    });
})();
 */